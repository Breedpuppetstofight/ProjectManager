
@{
    ViewBag.Title = "Gantt";
}
<script src="~/Scripts/d3/d3.js"></script>
<h2>Gantt</h2>

<div style="width:100%; height: 500px; overflow:auto">
    <div id="taskList" style="float:left; width:40%; padding-top: 39px;">

        <div style="border-top: 1px solid; border-color: #A2A7AD; height: 20px; font-size: smaller">
            @*<span data-bind="text: TaskName"></span>
            <span data-bind="text: Start"></span>
            <span data-bind="text: Finish"></span>*@
            <table style="width:100%">
                <tbody data-bind="foreach: Tasks">
                    <tr style="height: 20px; border-bottom: 1px solid #A2A7AD; border-right: 2px solid #A2A7AD; ">
                        <td data-bind="text: TaskName"></td>
                        <td data-bind="text: Start"></td>
                        <td data-bind="text: Finish"></td>
                    </tr>
                </tbody>
            </table>
        </div> 
    </div>
    <div id="ganttContainer" style="width: 60%; overflow-x: auto">

    </div>
</div>
<style>
    .taskBox{
        fill:#4C688B;
        stroke: #455466;
        stroke-width:1px;
    }
</style>
@section scripts{
<script src="~/Scripts/d3/d3.js"></script>
<script src="~/Models/ViewModels/Planning/data.js"></script>
    <script>

        //Helpers
        var format = d3.time.format("%d/%m/%Y");

        
        var startDate = d3.min(taskData, function (d) { return format.parse(d.Start); });
        var endDate = d3.max(taskData, function (d) { return format.parse(d.Finish); });

        // Arrays for top section
        var days = d3.time.days(startDate, endDate);
        var months = d3.time.months(startDate, endDate);

        console.log(months)

        //Scales
        var daysScale = d3.time.scale().domain([startDate, endDate]).range([0, days.length * 20]);
        var monthsScale = d3.time.scale().domain([startDate, endDate]).range([0, days.length * 20]);

        var svg = d3.select("#ganttContainer").append("svg")
                                             .attr("width", days.length * 20)
                                             .attr("height", (taskData.length * 20) + (20 * 3))
                                             .append("g");

        function pad(num, size) {
            var s = num+"";
            while (s.length < size) s = "0" + s;
            return s;
        }

        function addDays(y) {
            days.forEach(function (d) {
                var day = svg.append("rect")
                   .attr('x', function () { return daysScale(d) })
                   .attr('y', y)
                   .attr('height', 20)
                   .attr('width', 20)
                   .style('fill', 'white')
                   .style('stroke', '#A2A7AD')
                   .style('stroke-width', '1px')
            });
        }

        months.forEach(function (d, i) {
            var day = svg.append("rect")
               .attr('x', function () { return monthsScale(d) })
               .attr('y', 0)
               .attr('height', 20)
               .attr('width', function () { return months.length * 20; })
               .style('fill', '#e6e6e6')
               .style('stroke', '#A2A7AD')
               .style('stroke-width', '1px')

            svg.append("text")
                .attr("x", function () { return daysScale(d) + 2 })
                .attr("y", 20 + 15)
                .text(pad(d.getDate(), 2));
        });

        days.forEach(function (d, i) {
            var day = svg.append("rect")
               .attr('x', function () { return daysScale(d) })
               .attr('y', 20)
               .attr('height', 20)
               .attr('width', 20)
               .style('fill', '#e6e6e6')
               .style('stroke', '#A2A7AD')
               .style('stroke-width', '1px')

            svg.append("text")
                .attr("x", function () { return daysScale(d) + 2 })
                .attr("y", 20 + 15)
                .text(pad(d.getDate(), 2));
        });

        taskData.forEach(function (d, i) {
            var y = 40 + (20 * i);
            console.log("Start: " + format.parse(d.Start) + "; End: " + format.parse(d.Finish));

            addDays(y);

            var newBox = svg.append("rect")
                         .attr('id', 'task' + i)
                         .attr('x', function () { return daysScale(format.parse(d.Start)) })
                         .attr('y', y)
                         .attr('rx', 3)
                         .attr('ry', 3)
                         .attr('height', 20)
                         .attr('class', 'taskBox')
                         .attr('cursor', 'move')
                         .attr('width', daysScale(format.parse(d.Finish)) - daysScale(format.parse(d.Start)));

            svg.append("text")
                .attr("x", function () { return daysScale(format.parse(d.Start)) + 2 })
                .attr("y", y + 15)
                .style("fill", "white")
                .text(d.Work);

        });

        var viewModel = function(){
            var self = this;

            self.Tasks = ko.observableArray(taskData);
        }

        var dom = document.getElementById("taskList");

        ko.applyBindings(new viewModel(), dom);

        
        
    </script>
}
